---
// src/pages/app/accounts/[id]/entity.astro
import AppLayout from "../../../../layouts/AppLayout.astro";
import Alert from "../../../../components/ui/Alert.astro";
import Button from "../../../../components/ui/Button.astro";
import { createAccountService } from "../../../../lib/services/account-service";
import { createEntityAccountService } from "../../../../lib/services/entity-account-service";
import type { DbChartOfAccount, DbEntity, AccountSystemType } from "../../../../db/schema";
import { AppError, ErrorCode } from "../../../../utils/errors";
import type { APIContext } from "astro";

const locals = Astro.locals as App.Locals;
const accountIdFromPath = Astro.params.id;

// Access user directly from Astro.locals instead of using getSession
const userId = locals.user?.id;

if (!userId) {
  return Astro.redirect(`/auth/signin?error=Unauthorized&redirect=/app/accounts/${accountIdFromPath}/entity`);
}
if (!accountIdFromPath) {
  return Astro.redirect('/app/accounts?error=AccountIDMissing');
}

const db = locals.runtime?.env?.DB;
let pageError: string | null = null;
let chartOfAccount: DbChartOfAccount | null = null;
let linkedEntities: Array<DbEntity & { entity_account_link_id: string; entity_account_is_active: number; entity_account_custom_name: string | null }> = [];

if (!db) {
  pageError = "Database service is unavailable. Please contact support.";
  Astro.response.status = 500;
} else {
  const accountService = createAccountService(db);
  const entityAccountService = createEntityAccountService(db);
  try {
    chartOfAccount = await accountService.getAccountById(accountIdFromPath, userId);
    if (!chartOfAccount) {
      throw new AppError(ErrorCode.NOT_FOUND, 'Chart of Account record not found or access denied.', 404);
    }
    
    // Use getAccountEntityLinks instead of getLinkedEntitiesForAccount
    linkedEntities = await entityAccountService.getAccountEntityLinks(accountIdFromPath, userId);
  } catch (err: any) {
    console.error(`Error fetching data for account ${accountIdFromPath} entities:`, err);
    pageError = err.message || 'An unexpected error occurred.';
    Astro.response.status = (err instanceof AppError && err.status) ? err.status : 500;
  }
}

const getTypeClass = (type?: AccountSystemType | string | null) => {
  const classes: Record<string, string> = {
    asset: "bg-blue-100 text-blue-800",
    liability: "bg-orange-100 text-orange-800",
    equity: "bg-purple-100 text-purple-800",
    income: "bg-green-100 text-green-800",
    expense: "bg-red-100 text-red-800"
  };
  return classes[type || ''] || "bg-gray-100 text-gray-800";
};

const formatBusinessTypeDisplay = (type?: string | null) => {
  if (!type) return 'N/A';
  return type.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
};
---

<AppLayout title={chartOfAccount ? `Entities Using Account: ${chartOfAccount.name}` : "Account Entities"}>
  <div class="container mx-auto px-4 py-8">
    {pageError && !chartOfAccount && (
      <div class="flex flex-col items-center justify-center py-12">
        <Alert type="error" class="mb-6">{pageError}</Alert>
        <Button href="/app/accounts" variant="outline">Back to Chart of Accounts</Button>
      </div>
    )}

    {chartOfAccount && !pageError && (
      <>
        <div class="mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h1 class="text-3xl font-bold text-gray-800">
              Entities Using Account: <span class="text-primary-600">{chartOfAccount.code} - {chartOfAccount.name}</span>
            </h1>
            <p class="text-gray-600 mt-1 text-sm">
              Type: <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getTypeClass(chartOfAccount.type)}`}>
                {chartOfAccount.type.charAt(0).toUpperCase() + chartOfAccount.type.slice(1)}
              </span>
            </p>
          </div>
          <div class="flex gap-2 flex-shrink-0">
            <Button href={`/app/accounts/${chartOfAccount.id}`} variant="outline">Back to Account Details</Button>
            <Button href="/app/accounts" variant="secondary">Chart of Accounts</Button>
          </div>
        </div>

        {pageError && <Alert type="error" class="mb-6">{pageError}</Alert>}

        <div class="bg-white shadow-xl rounded-xl overflow-hidden border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <h2 class="text-lg font-semibold text-gray-700">Linked Entities ({linkedEntities.length})</h2>
          </div>
          
          {linkedEntities.length === 0 ? (
            <div class="p-8 text-center text-gray-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No entities are currently using this account.</h3>
              <p class="mt-1 text-sm text-gray-500">You can link this account to entities from their respective 'Manage Accounts' pages.</p>
            </div>
          ) : (
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Entity Name</th>
                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Legal Name</th>
                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Business Type</th>
                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Link Status</th>
                    <th class="px-6 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {linkedEntities.map(entityLink => (
                    <tr class="hover:bg-gray-50 transition-colors">
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-primary-700">
                        <a href={`/app/entities/${entityLink.id}`} class="hover:underline" title={`View ${entityLink.name}`}>
                          {entityLink.entity_account_custom_name || entityLink.name}
                          {entityLink.entity_account_custom_name && <span class="text-xs text-gray-400 ml-1 block">(Std: {entityLink.name})</span>}
                        </a>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{entityLink.legal_name || 'â€”'}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatBusinessTypeDisplay(entityLink.business_type)}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${entityLink.entity_account_is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                          {entityLink.entity_account_is_active ? 'Active' : 'Inactive'}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <a href={`/app/entities/${entityLink.id}/accounts`} class="text-indigo-600 hover:text-indigo-800 hover:underline" title="Manage this entity's accounts">
                          Manage Entity Accounts
                        </a>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </>
    )}
  </div>
</AppLayout>