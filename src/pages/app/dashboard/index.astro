---
// src/pages/app/dashboard/index.astro
import AppLayout from "@layouts/AppLayout.astro"; // Corrected path assuming @layouts alias
import { getSession } from "@lib/auth"; // Corrected path assuming @lib alias
import type { APIContext } from "astro";
import Button from "@components/ui/Button.astro"; // For quick action links if styled as buttons

// Placeholder for a utility function, ensure you have this or similar
// import { formatCurrency } from "@utils/financial"; 
const formatCurrency = (value: number, currency = 'USD') => {
  return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(value);
};


// Type assertion for locals if not globally typed
const locals = Astro.locals as App.Locals;

// 1. Get session and validate authentication - FIX: Add second parameter
const session = await getSession(Astro.request, locals.runtime?.env);
const userId = session?.user?.id;
const userName = session?.user?.name || session?.user?.email || "User"; // Get user's name or email

if (!userId) {
  // If no user ID, redirect to sign-in
  return Astro.redirect('/auth/signin?error=Unauthorized&redirect=/app/dashboard');
}

// 2. Get D1 client from Astro.locals (not used for data yet, but good practice to have)
const db = locals.runtime?.env?.DB;
if (!db) {
  console.warn("Dashboard: D1 Database binding (DB) not found. Live data features will be limited.");
  // No critical error for dashboard if it can function with static/placeholder elements initially
}

// --- Placeholder Data (Replace with actual data fetching later) ---
const bankAccounts = [
  { id: "1", name: "Main Checking Account", balance: 12500.75, currency: "USD" },
  { id: "2", name: "Property Reserve Savings", balance: 45000.00, currency: "USD" },
  { id: "3", name: "Security Deposits (Trust)", balance: 8200.00, currency: "USD" },
];
const totalBalance = bankAccounts.reduce((sum, account) => sum + account.balance, 0);

const recentTransactions = [
    { id: "t1", date: "2025-05-14", description: "Rent Payment - Unit 101", amount: 1200, type: "income" },
    { id: "t2", date: "2025-05-13", description: "Home Depot - Plumbing Supplies", amount: -75.50, type: "expense" },
    { id: "t3", date: "2025-05-12", description: "Management Fee - May", amount: -250, type: "expense" },
    { id: "t4", date: "2025-05-10", description: "Late Fee - Unit 203", amount: 50, type: "income" },
];

const quickStats = [
    { label: "Total Properties Managed", value: "3", icon: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" },
    { label: "Active Leases", value: "2", icon: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" },
    { label: "Overdue Payments", value: "1", icon: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z", color: "text-red-500" },
];

const quickActionLinks = [
  { href: "/app/transactions/new", title: "New Transaction", description: "Record income or expenses.", icon: "M12 4v16m8-8H4" },
  { href: "/app/entities", title: "Manage Entities", description: "View or update your properties.", icon: "M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M5 5h5M5 8h2m2 0h2m2 0h2M5 11h2m2 0h2m2 0h2M5 14h_REMOTE_REMOVED_"},
  { href: "/app/accounts", title: "Chart of Accounts", description: "Manage your financial accounts.", icon: "M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" },
  // { href: "/app/transactions/import", title: "Import Transactions", description: "Import from CSV file.", icon: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" },
  { href: "/app/reports", title: "View Reports", description: "Financial statements and analysis.", icon: "M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" }
];
---

<AppLayout title="Dashboard">
  <div class="px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8">
      <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">Welcome back, {userName}!</h1>
      <p class="mt-1 text-sm text-gray-600">Here's a quick overview of your real estate accounting.</p>
    </div>

    <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3 mb-8">
      {quickStats.map(stat => (
        <div class="bg-white overflow-hidden shadow-lg rounded-xl border border-gray-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class={`flex-shrink-0 bg-primary-500 rounded-md p-3 ${stat.icon ? '' : 'hidden'}`}>
                <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={stat.icon} />
                </svg>
              </div>
              <div class="ml-4 w-0 flex-1">
                <dt class="text-sm font-medium text-gray-500 truncate">
                  {stat.label}
                </dt>
                <dd class="flex items-baseline">
                  <p class={`text-2xl font-semibold ${stat.color || 'text-gray-900'}`}>
                    {stat.value}
                  </p>
                </dd>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <div class="lg:col-span-2 space-y-8">
        <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Bank Account Balances</h2>
          <div class="space-y-4">
            {bankAccounts.map((account) => (
              <div class="flex justify-between items-center border-b border-gray-100 pb-3 last:border-b-0 last:pb-0">
                <span class="text-sm font-medium text-gray-700">{account.name}</span>
                <span class={`text-sm font-semibold ${account.balance >= 0 ? "text-green-600" : "text-red-600"}`}>
                  {formatCurrency(account.balance, account.currency)}
                </span>
              </div>
            ))}
            <div class="flex justify-between items-center pt-3 border-t border-gray-200 font-semibold">
              <span class="text-md text-gray-800">Total Cash Balance</span>
              <span class={`text-md ${totalBalance >= 0 ? "text-green-700" : "text-red-700"}`}>
                {formatCurrency(totalBalance)}
              </span>
            </div>
          </div>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-gray-800">Recent Activity</h2>
            <a href="/app/transactions" class="text-sm font-medium text-primary-600 hover:text-primary-800 hover:underline">View All</a>
          </div>
          <ul role="list" class="divide-y divide-gray-100">
            {recentTransactions.map(tx => (
              <li class="py-3 sm:py-4">
                <div class="flex items-center space-x-4">
                  <div class={`flex-shrink-0 p-2 rounded-full ${tx.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>
                    {tx.type === 'income' ? (
                      <svg class="h-5 w-5 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                      </svg>
                    ) : (
                      <svg class="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
                      </svg>
                    )}
                  </div>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-gray-900 truncate">{tx.description}</p>
                    <p class="text-xs text-gray-500 truncate">{new Date(tx.date).toLocaleDateString()}</p>
                  </div>
                  <div class={`text-sm font-semibold ${tx.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {formatCurrency(tx.amount)}
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <div class="lg:col-span-1">
        <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
          <h2 class="text-xl font-semibold text-gray-800 mb-5">Quick Actions</h2>
          <div class="space-y-4">
            {quickActionLinks.map(link => (
              <a 
                href={link.href} 
                class="group block p-4 bg-slate-50 rounded-lg hover:bg-primary-50 border border-slate-200 hover:border-primary-300 transition-all duration-150 ease-in-out transform hover:scale-[1.02]"
              >
                <div class="flex items-center">
                    {link.icon && (
                        <div class="flex-shrink-0 bg-primary-100 text-primary-600 rounded-lg p-2 mr-3 group-hover:bg-primary-200">
                             <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={link.icon} />
                            </svg>
                        </div>
                    )}
                    <div>
                        <h3 class="text-sm font-semibold text-primary-700 group-hover:text-primary-900">{link.title}</h3>
                        <p class="text-xs text-gray-600 group-hover:text-gray-700">{link.description}</p>
                    </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</AppLayout>