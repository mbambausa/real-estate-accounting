---
// src/pages/app/entities/[id]/index.astro
import AppLayout from "../../../../layouts/AppLayout.astro";
import Alert from "../../../../components/ui/Alert.astro";
import Button from "../../../../components/ui/Button.astro";
import EntitySelector from "../../../../components/entities/EntitySelector.astro";
import { createEntityService } from "../../../../lib/services/entity-service";
import { AppError, ErrorCode } from "../../../../utils/errors"; // Assuming ErrorCode.NOT_FOUND is valid
import { getSession } from "../../../../lib/auth";
import type { Entity } from "../../../../types/entity";
import type { APIContext } from "astro";

const locals = Astro.locals as App.Locals; // This type assertion is in the frontmatter, generally okay.

const session = await getSession(Astro.request, locals.runtime?.env);
const userId = session?.user?.id;
const entityIdFromPath = Astro.params.id;

if (!userId) {
  return Astro.redirect(`/auth/signin?error=Unauthorized&redirect=/app/entities/${entityIdFromPath || ''}`);
}

// Add type assertion for userId
const userIdString = userId as string;

if (!entityIdFromPath) {
  console.error("Entity ID missing from path.");
  return Astro.redirect('/app/entities?error=EntityIDMissing');
}

// At this point, TypeScript knows entityIdFromPath is definitely a string
const entityId: string = entityIdFromPath;

const db = locals.runtime?.env?.DB;
const isEditing = Astro.url.searchParams.get('edit') === 'true';
const successMessage = Astro.url.searchParams.get('success');
const errorMessageFromQuery = Astro.url.searchParams.get('error');
const entityService = db ? createEntityService(db) : null;

let entity: Entity | null = null;
let childEntities: Entity[] = [];
let parentEntity: Entity | null = null;
let allEntitiesForParentSelector: Entity[] = [];
let pageError: string | null = null;

if (!db) {
    pageError = "Database service is unavailable. Please contact support.";
    Astro.response.status = 500;
} else if (entityService) {
  try {
    // Create a non-null variable within this scope
    const entityServiceInstance = entityService;
    
    entity = await entityServiceInstance.getEntityById(entityId, userIdString);

    if (!entity) {
      throw new AppError(ErrorCode.NOT_FOUND, 'Entity not found or you do not have permission to view it.', 404);
    }
    
    // Ensure entity has an ID before proceeding
    if (!entity.id) {
      console.error('Critical: Entity found but its ID is undefined.', entity);
      throw new AppError(ErrorCode.NOT_FOUND, 'Entity data is critically inconsistent (ID missing). Please contact support.', 500);
    }

    // Now TypeScript knows entity.id is a string
    childEntities = await entityServiceInstance.getChildEntities(entity.id, userIdString);

    if (entity.parent_id) {
      parentEntity = await entityServiceInstance.getEntityById(entity.parent_id, userIdString);
    }

    if (isEditing) {
      const allUserEntities = await entityServiceInstance.getAllEntities(userIdString);
      const descendantIds = new Set<string>();

      async function collectDescendants(currentEntityId: string) {
        if (descendantIds.has(currentEntityId)) return;
        descendantIds.add(currentEntityId);
        
        // Now TypeScript knows currentEntityId is a string
        const children = await entityServiceInstance.getChildEntities(currentEntityId, userIdString);
        
        for (const child of children) {
          if (child.id) { // Guard for child.id
            await collectDescendants(child.id); // Now TypeScript knows child.id is a string
          } else {
            console.warn(`Skipping child entity without ID during descendant collection for parent ${currentEntityId}`);
          }
        }
      }
      
      // Safely call collectDescendants with entity.id (which we've verified exists)
      await collectDescendants(entity.id);
      
      // Filter out entities without IDs and those in the descendantIds set
      allEntitiesForParentSelector = allUserEntities.filter(e => {
        return e.id !== undefined && !descendantIds.has(e.id);
      });
    }

  } catch (err: any) {
    console.error(`Error fetching entity details for ID ${entityId}:`, err);
    pageError = err.message || 'An unexpected error occurred while loading entity details.';
    if (err instanceof AppError) {
        Astro.response.status = err.status || 500;
    } else {
        Astro.response.status = 500;
    }
  }
}

const businessTypes = ["sole_proprietorship", "partnership", "limited_liability_company", "corporation", "s_corporation", "trust", "other"];
const formatBusinessTypeDisplay = (type?: string | null) => {
  if (!type) return 'N/A';
  return type.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
};
const formatEinDisplay = (ein?: string | null) => {
  if (!ein) return 'N/A';
  if (ein.includes('-')) return ein;
  if (ein.length === 9) return `${ein.substring(0, 2)}-${ein.substring(2)}`;
  return ein;
};
---

<AppLayout title={entity ? (isEditing ? `Edit: ${entity.name}` : entity.name) : "Entity Details"}>
  <div class="container mx-auto px-4 py-8 max-w-3xl">
    {pageError && (!entity || (typeof Astro.response.status === 'number' && Astro.response.status >= 500)) && ( 
      <div class="flex flex-col items-center justify-center py-12">
        <Alert type="error" class="mb-6">{pageError}</Alert>
        <Button href="/app/entities" variant="outline">Back to Entities List</Button>
      </div>
    )}

    {entity && (!pageError || (typeof Astro.response.status === 'number' && Astro.response.status === 404)) && (
      <>
        <div class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h1 class="text-3xl font-bold text-gray-800 break-words">{isEditing ? "Edit Entity" : entity.name}</h1>
            {!isEditing && entity.legal_name && entity.legal_name !== entity.name && (
              <p class="text-gray-600 mt-1 text-sm">Legal Name: {entity.legal_name}</p>
            )}
            {isEditing && <p class="text-gray-600 mt-1">Editing details for: <strong>{entity.name}</strong></p>}
          </div>
          
          <div class="flex gap-2 flex-shrink-0">
            {entity.id && isEditing ? (
              <Button href={`/app/entities/${entity.id}`} variant="outline">
                Cancel Edit
              </Button>
            ) : entity.id ? (
              <Button href={`/app/entities/${entity.id}?edit=true`} variant="primary">
                Edit Entity
              </Button>
            ) : null}
            <Button href="/app/entities" variant="secondary">
              All Entities
            </Button>
          </div>
        </div>
        
        {pageError && typeof Astro.response.status === 'number' && Astro.response.status === 404 && (
            <Alert type="error" class="mb-6">{pageError}</Alert>
        )}
        {successMessage && (
          <Alert type="success" class="mb-6" dismissible={true}>
            {decodeURIComponent(successMessage)}
          </Alert>
        )}
        {errorMessageFromQuery && !pageError && (
          <Alert type="error" class="mb-6" dismissible={true}>
            {decodeURIComponent(errorMessageFromQuery)}
          </Alert>
        )}

        {isEditing && entity.id ? (
          <div class="bg-white shadow-xl rounded-xl overflow-hidden border border-gray-200">
            <div class="p-6 sm:p-8">
              <form 
                method="POST" 
                action={`/api/entities/${entity.id}`} 
                class="space-y-6"
                id="edit-entity-form"
              >
                <input type="hidden" name="_method" value="PUT" />
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                    Entity Name <span class="text-red-600">*</span>
                  </label>
                  <input type="text" id="name" name="name" value={entity.name} required
                         class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
                </div>
                <div>
                  <label for="legal_name" class="block text-sm font-medium text-gray-700 mb-1">Legal Name</label>
                  <input type="text" id="legal_name" name="legal_name" value={entity.legal_name || ''}
                         class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
                </div>
                <div>
                  <label for="ein" class="block text-sm font-medium text-gray-700 mb-1">EIN</label>
                  <input type="text" id="ein" name="ein" value={entity.ein || ''} pattern="^\d{2}-?\d{7}$" maxlength="10" placeholder="XX-XXXXXXX"
                         class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
                </div>
                <div>
                  <label for="business_type" class="block text-sm font-medium text-gray-700 mb-1">Business Type</label>
                  <select id="business_type" name="business_type" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 bg-white">
                    <option value="">Select a type...</option>
                    {businessTypes.map(type => (
                      <option value={type} selected={entity.business_type === type}>{formatBusinessTypeDisplay(type)}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label for="address" class="block text-sm font-medium text-gray-700 mb-1">Property/Business Address</label>
                  <textarea id="address" name="address" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">{entity.address || ''}</textarea>
                </div>
                <div>
                  <label for="legal_address" class="block text-sm font-medium text-gray-700 mb-1">Legal Address</label>
                  <textarea id="legal_address" name="legal_address" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">{entity.legal_address || ''}</textarea>
                </div>
                <EntitySelector
                  entities={allEntitiesForParentSelector}
                  selectedId={entity.parent_id || ""}
                  name="parent_id"
                  id="parent_id_selector_edit"
                  label="Parent Entity (Optional)"
                  placeholder="None (This is a top-level entity)"
                  showLegalName={true}
                  class="mt-1"
                  excludeId={entity.id} />
                <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200 mt-8">
                  <Button href={`/app/entities/${entity.id}`} variant="outline">Cancel</Button>
                  <Button type="submit" variant="primary" id="submit-edit-entity">Save Changes</Button>
                </div>
              </form>
            </div>
          </div>
        ) : entity && entity.id ? (
          <div class="bg-white shadow-xl rounded-xl overflow-hidden border border-gray-200">
            <div class="p-6 border-b border-gray-200">
              <h2 class="text-xl font-semibold text-gray-700">Entity Details</h2>
            </div>
            <dl class="divide-y divide-gray-200">
              <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                <dt class="text-sm font-medium text-gray-500">Legal Name</dt>
                <dd class="mt-1 text-sm text-gray-900 md:col-span-2">{entity.legal_name || entity.name}</dd>
              </div>
              {entity.ein && (
                <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                  <dt class="text-sm font-medium text-gray-500">EIN</dt>
                  <dd class="mt-1 text-sm text-gray-900 md:col-span-2">{formatEinDisplay(entity.ein)}</dd>
                </div>
              )}
              {entity.business_type && (
                <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                  <dt class="text-sm font-medium text-gray-500">Business Type</dt>
                  <dd class="mt-1 text-sm text-gray-900 md:col-span-2">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {formatBusinessTypeDisplay(entity.business_type)}
                    </span>
                  </dd>
                </div>
              )}
              {parentEntity && parentEntity.id && (
                <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                  <dt class="text-sm font-medium text-gray-500">Parent Entity</dt>
                  <dd class="mt-1 text-sm text-gray-900 md:col-span-2">
                    <a href={`/app/entities/${parentEntity.id}`} class="text-primary-600 hover:underline">
                      {parentEntity.name}
                    </a>
                  </dd>
                </div>
              )}
               {entity.address && (
                <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <dt class="text-sm font-medium text-gray-500">Address</dt>
                  <dd class="mt-1 text-sm text-gray-900 md:col-span-2 whitespace-pre-line">{entity.address}</dd>
                </div>
              )}
              {entity.legal_address && entity.legal_address !== entity.address && (
                <div class="px-6 py-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <dt class="text-sm font-medium text-gray-500">Legal Address</dt>
                  <dd class="mt-1 text-sm text-gray-900 md:col-span-2 whitespace-pre-line">{entity.legal_address}</dd>
                </div>
              )}
            </dl>
            <div class="px-6 py-4 border-t border-gray-200 flex flex-wrap gap-3">
                <Button href={`/app/entities/${entity.id}/accounts`} variant="primary">Manage Accounts</Button>
                <Button href={`/app/entities/${entity.id}/parent`} variant="outline">
                    {parentEntity ? 'Change Parent' : 'Set Parent'}
                </Button>
                 <form 
                    method="POST" 
                    action={`/api/entities/${entity.id}`}
                    class="inline-block"
                    id="delete-entity-form"
                    >
                    <input type="hidden" name="_method" value="DELETE" />
                    <Button type="submit" variant="danger" id="delete-entity-button">Delete Entity</Button>
                </form>
            </div>
          </div>
        ) : null}
        
        {!isEditing && childEntities.length > 0 && (
          <div class="mt-10">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Child Entities</h2>
            <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-200">
              <ul role="list" class="divide-y divide-gray-200">
                {childEntities.map(child => (
                  <li class="px-6 py-4 hover:bg-gray-50 transition-colors">
                    {child.id ? (
                      <a href={`/app/entities/${child.id}`} class="flex justify-between items-center">
                        <div>
                          <p class="text-sm font-medium text-primary-600 truncate">{child.name}</p>
                          <p class="text-xs text-gray-500">{formatBusinessTypeDisplay(child.business_type)}</p>
                        </div>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                        </svg>
                      </a>
                    ) : (
                      <div class="flex justify-between items-center">
                         <div>
                          <p class="text-sm font-medium text-gray-700 truncate">{child.name} (ID missing)</p>
                          <p class="text-xs text-gray-500">{formatBusinessTypeDisplay(child.business_type)}</p>
                        </div>
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </>
    )}
  </div>
</AppLayout>

<script define:vars={{ clientEntityId: entity?.id ?? null }}>
  document.addEventListener('DOMContentLoaded', () => {
    const einInput = document.getElementById('ein');
    const editForm = document.getElementById('edit-entity-form');
    const deleteForm = document.getElementById('delete-entity-form');
    const deleteButton = document.getElementById('delete-entity-button');

    if (einInput && einInput instanceof HTMLInputElement) {
      einInput.addEventListener('input', (e) => {
        const target = e.target;
        if (target && target instanceof HTMLInputElement) {
          let value = target.value.replace(/[^\d]/g, '');
          if (value.length > 2) {
            value = value.slice(0, 2) + '-' + value.slice(2, 9);
          }
          target.value = value;
          if (value.length > 0 && !/^\d{2}-\d{7}$/.test(value) && value.length === 10) {
              target.setCustomValidity("EIN must be in XX-XXXXXXX format.");
          } else if (value.length > 0 && value.length < 10) {
              target.setCustomValidity("EIN must be 9 digits long.");
          } else {
              target.setCustomValidity("");
          }
        }
      });
    }

    if (deleteForm && deleteButton && typeof clientEntityId === 'string') {
        deleteForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            if (!confirm('Are you sure you want to delete this entity? This action cannot be undone and might affect related records.')) {
                return;
            }
            
            if (deleteButton instanceof HTMLButtonElement) {
                deleteButton.disabled = true;
                deleteButton.textContent = 'Deleting...';
            }
            
            try {
                const response = await fetch(deleteForm.action, { 
                    method: 'DELETE',
                });

                if (response.ok) {
                    window.location.href = `/app/entities?success=Entity deleted successfully.`;
                } else {
                    const errorResult = await response.json().catch(() => ({ error: 'Failed to delete entity and parse error response.' }));
                    window.location.href = `/app/entities/${clientEntityId}?error=${encodeURIComponent(errorResult.error || 'Failed to delete entity.')}`;
                }
            } catch (error) {
                console.error('Delete form submission error:', error);
                window.location.href = `/app/entities/${clientEntityId}?error=${encodeURIComponent('An unexpected error occurred during deletion.')}`;
            }
        });
    } else if (deleteForm && !clientEntityId) {
        console.warn("Delete form present but clientEntityId is not available for constructing redirect URLs.");
    }
  });
</script>