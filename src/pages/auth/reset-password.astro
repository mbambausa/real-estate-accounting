---
// src/pages/auth/reset-password.astro
import AuthLayout from "@layouts/AuthLayout.astro";
import Button from "@components/ui/Button.astro";
import Alert from "@components/ui/Alert.astro";
import { hashPassword } from '../../lib/passwordUtils';
import type { RuntimeEnv } from "../../env.d";

// Type assertion for locals if not globally typed
const locals = Astro.locals as App.Locals;

let errorMessage: string | null = null;
let successMessage: string | null = null;
let validToken = false;
let userId: string | null = null;

// Get token from URL
const params = new URL(Astro.request.url).searchParams;
const token = params.get("token");

// Validate token (this would normally check the database)
if (!token) {
  errorMessage = "Missing or invalid password reset token. Please request a new password reset link.";
} else {
  const env = locals.runtime?.env as RuntimeEnv | undefined;
  if (!env?.DB) {
    errorMessage = "Service Unavailable: Database configuration error. Please try again later.";
    console.error("Reset Password GET: DB binding not found in runtime.env");
    Astro.response.status = 503;
  } else {
    // In a real implementation, you would check the token in your database
    // and verify it hasn't expired
    
    // Example of token validation (pseudocode):
    // const resetToken = await db
    //   .prepare("SELECT user_id, expires FROM reset_tokens WHERE token = ? AND used = 0 LIMIT 1")
    //   .bind(token)
    //   .first();
    
    // if (resetToken && resetToken.expires > Math.floor(Date.now() / 1000)) {
    //   validToken = true;
    //   userId = resetToken.user_id;
    // }
    
    // For demo purposes, let's pretend the token is valid
    validToken = true;
    userId = "demo-user-id";
  }
}

// Process form submission
if (Astro.request.method === "POST" && validToken && userId) {
  const env = locals.runtime?.env as RuntimeEnv | undefined;
  if (!env?.DB) {
    errorMessage = "Service Unavailable: Database configuration error. Please try again later.";
    Astro.response.status = 503;
  } else {
    const db = env.DB;
    try {
      const formData = await Astro.request.formData();
      const password = formData.get("password")?.toString() ?? "";
      const confirmPassword = formData.get("confirm_password")?.toString() ?? "";
      
      // Validate passwords
      if (!password || !confirmPassword) {
        errorMessage = "Please fill in all fields.";
      } else if (password.length < 8) {
        errorMessage = "Password must be at least 8 characters long.";
      } else if (!/[A-Z]/.test(password)) {
        errorMessage = "Password must include at least one uppercase letter.";
      } else if (!/[0-9]/.test(password)) {
        errorMessage = "Password must include at least one number.";
      } else if (!/[^A-Za-z0-9]/.test(password)) {
        errorMessage = "Password must include at least one special character.";
      } else if (password !== confirmPassword) {
        errorMessage = "Passwords do not match. Please try again.";
      } else {
        // Hash the new password
        const passwordHash = await hashPassword(password);
        
        const now = Math.floor(Date.now() / 1000);
        
        // In a real implementation, update the user's password in the database
        // await db
        //   .prepare("UPDATE users SET password_hash = ?, updated_at = ? WHERE id = ?")
        //   .bind(passwordHash, now, userId)
        //   .run();
        
        // Also mark the token as used to prevent reuse
        // await db
        //   .prepare("UPDATE reset_tokens SET used = 1 WHERE token = ?")
        //   .bind(token)
        //   .run();
        
        // For demo purposes, assume it's successful
        return Astro.redirect("/auth/signin?password_reset=true");
      }
    } catch (e: unknown) {
      const error = e instanceof Error ? e : new Error(String(e));
      console.error("Set New Password Error:", error.message, error.stack);
      errorMessage = "An unexpected error occurred. Please try again.";
      Astro.response.status = 500;
    }
  }
}
---

<AuthLayout title="Set New Password">
  <div class="w-full max-w-sm mx-auto">
    <div class="text-center mb-8">
      <a href="/" class="inline-block mb-4">
        <svg class="w-16 h-16 text-primary-600 mx-auto" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M3.75 3A.75.75 0 003 3.75v16.5c0 .414.336.75.75.75h16.5A.75.75 0 0021 20.25V3.75A.75.75 0 0020.25 3H3.75zM6.5 6.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75h6.5a.75.75 0 010 1.5h-6.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75H17a.75.75 0 010 1.5H7.25a.75.75 0 01-.75-.75zm.75 2.75a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5z" clip-rule="evenodd" />
        </svg>
      </a>
      <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">Set New Password</h1>
      <p class="text-sm text-gray-600 mt-2">Please choose a new secure password for your account.</p>
    </div>
  
    {errorMessage && (
      <Alert type="error" dismissible={false}>
        {errorMessage}
      </Alert>
    )}
  
    {validToken ? (
      <form method="POST" class="bg-white shadow-xl rounded-lg px-6 py-8 sm:px-8 sm:py-10 space-y-6 border border-gray-200">
        <input type="hidden" name="token" value={token} />
        
        <div x-data="{ password: '', strength: 0 }">
          <label for="password" class="block text-sm font-medium text-gray-700 mb-1.5">
            New Password <span class="text-red-500">*</span>
          </label>
          <div class="relative">
            <input 
              id="password"
              name="password" 
              type="password" 
              required 
              minlength="8"
              x-model="password"
              x-on:input="strength = calculatePasswordStrength(password)"
              autocomplete="new-password"
              placeholder="Minimum 8 characters"
              class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
            />
            <button 
              type="button"
              class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
              x-data="{ show: false }"
              x-on:click="show = !show; $refs.pwd.type = show ? 'text' : 'password'"
              tabindex="-1"
            >
              <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" x-show="!show">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" x-show="show" style="display: none;">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
              </svg>
            </button>
          </div>
          
          <!-- Password strength indicator -->
          <div class="mt-1.5 h-1 w-full bg-gray-200 rounded">
            <div 
              class="h-1 rounded transition-all"
              x-bind:class="{
                'w-1/4 bg-red-500': strength === 1,
                'w-2/4 bg-yellow-500': strength === 2,
                'w-3/4 bg-blue-500': strength === 3,
                'w-full bg-green-500': strength === 4
              }"
            ></div>
          </div>
          <p class="mt-1 text-xs text-gray-500" x-text="getStrengthText(strength)"></p>
          
          <!-- Password requirements -->
          <div class="text-xs text-gray-500 mt-2 space-y-1">
            <p>Password must include:</p>
            <ul class="list-disc pl-5 space-y-0.5">
              <li x-bind:class="{ 'text-green-500': password.length >= 8 }">At least 8 characters</li>
              <li x-bind:class="{ 'text-green-500': /[A-Z]/.test(password) }">At least one uppercase letter</li>
              <li x-bind:class="{ 'text-green-500': /[0-9]/.test(password) }">At least one number</li>
              <li x-bind:class="{ 'text-green-500': /[^A-Za-z0-9]/.test(password) }">At least one special character</li>
            </ul>
          </div>
        </div>
        
        <div>
          <label for="confirm_password" class="block text-sm font-medium text-gray-700 mb-1.5">
            Confirm New Password <span class="text-red-500">*</span>
          </label>
          <input 
            id="confirm_password"
            name="confirm_password" 
            type="password" 
            required 
            minlength="8"
            autocomplete="new-password"
            placeholder="Re-enter your new password"
            class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
          />
        </div>
        
        <div class="pt-2">
          <Button 
            type="submit" 
            variant="primary" 
            size="lg"
            fullWidth={true}
          >
            Reset Password
          </Button>
        </div>
      </form>
    ) : (
      <div class="bg-white shadow-xl rounded-lg px-6 py-8 sm:px-8 sm:py-10 border border-gray-200">
        <p class="text-center text-gray-600 mb-4">
          The password reset link is invalid or has expired.
        </p>
        <a href="/auth/forgot-password" class="block w-full">
          <Button 
            variant="primary" 
            size="lg"
            fullWidth={true}
          >
            Request New Reset Link
          </Button>
        </a>
      </div>
    )}
  
    <p class="mt-8 text-center text-sm text-gray-600">
      Remember your password? 
      <a href="/auth/signin" class="font-medium text-primary-600 hover:text-primary-500 hover:underline">
        Sign In
      </a>
    </p>
  </div>
</AuthLayout>

<script>
// TypeScript declarations for window extensions
interface Window {
  calculatePasswordStrength: (password: string) => number;
  getStrengthText: (strength: number) => string;
}

// JavaScript for password strength calculation
function calculatePasswordStrength(password: string): number {
  if (!password) return 0;
  
  let strength = 0;
  
  // Length check
  if (password.length >= 8) strength += 1;
  if (password.length >= 12) strength += 1;
  
  // Character variety checks
  if (/[A-Z]/.test(password)) strength += 1;
  if (/[0-9]/.test(password)) strength += 1;
  if (/[^A-Za-z0-9]/.test(password)) strength += 1;
  
  // Scale from 0-5 to 0-4
  return Math.min(4, Math.floor(strength * 0.8));
}

function getStrengthText(strength: number): string {
  switch (strength) {
    case 0: return "Password strength: Too weak";
    case 1: return "Password strength: Weak";
    case 2: return "Password strength: Fair";
    case 3: return "Password strength: Good";
    case 4: return "Password strength: Strong";
    default: return "";
  }
}

// Make functions available to Alpine
(window as any).calculatePasswordStrength = calculatePasswordStrength;
(window as any).getStrengthText = getStrengthText;
</script>