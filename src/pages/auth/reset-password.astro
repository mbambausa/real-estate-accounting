---
// src/pages/auth/reset-password.astro
import AuthLayout from "@layouts/AuthLayout.astro";
import Button from "@components/ui/Button.astro";
import Alert from "@components/ui/Alert.astro";
import { hashPassword } from "../../lib/passwordUtils";
import type { RuntimeEnv } from "../../env.d";

const locals = Astro.locals as App.Locals;
const runtimeEnv = locals.runtime?.env as RuntimeEnv | undefined;

// Pull the CSRF token that our middleware placed on GET
const csrfTokenForForm = locals.csrfToken || "";

// State
let errorMessage: string | null = null;
let validPasswordResetToken = false;
let userIdForPasswordReset: string | null = null;

// Extract token from query
const urlParams = new URL(Astro.request.url).searchParams;
const tokenParam = urlParams.get("token");

// 1) Validate the reset-link token (demo logic; replace with real DB check)
if (!runtimeEnv?.DB) {
  errorMessage =
    "Service Unavailable: Server configuration error. Please try again later.";
} else if (!tokenParam) {
  errorMessage =
    "Password reset link is invalid or missing. Please request a new one.";
} else if (tokenParam === "valid-demo-token") {
  validPasswordResetToken = true;
  userIdForPasswordReset = "demo-user-id";
} else {
  errorMessage =
    "Password reset link is invalid, expired, or already used. Please request a new one.";
}

// 2) Process POST (only runs if the browser submitted the form)
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const password = formData.get("password")?.toString() || "";
  const confirmPassword = formData.get("confirm_password")?.toString() || "";

  // Safeguard: token may have been invalid on GET
  if (!validPasswordResetToken || !userIdForPasswordReset) {
    errorMessage =
      "Cannot process request: password reset token is invalid or expired.";
    Astro.response.status = 400;
  }
  // Password field checks
  else if (!password || !confirmPassword) {
    errorMessage = "Please enter and confirm your new password.";
  } else if (password.length < 8) {
    errorMessage = "Password must be at least 8 characters long.";
  } else if (!/[A-Z]/.test(password)) {
    errorMessage = "Password must include at least one uppercase letter.";
  } else if (!/[0-9]/.test(password)) {
    errorMessage = "Password must include at least one number.";
  } else if (!/[^A-Za-z0-9]/.test(password)) {
    errorMessage = "Password must include at least one special character.";
  } else if (password !== confirmPassword) {
    errorMessage = "Passwords do not match. Please try again.";
  } else {
    // All good â†’ hash & redirect
    const newHash = await hashPassword(password);
    console.log(
      `INFO: (demo) Would update user ${userIdForPasswordReset}'s password in DB to ${newHash} and invalidate token ${tokenParam}`
    );
    return Astro.redirect("/auth/signin?password_reset=true");
  }
}
---

<AuthLayout title="Set New Password">
  <div class="w-full max-w-sm mx-auto">
    <div class="text-center mb-6">
      <a href="/" aria-label="Home">{/* icon omitted */}</a>
      <h1 class="text-2xl font-bold">Set New Password</h1>
      {validPasswordResetToken && !errorMessage && (
        <p class="text-sm text-gray-600 mt-1">
          Please choose a new secure password for your account.
        </p>
      )}
    </div>

    {errorMessage && (
      <div class="mb-4">
        <Alert type="error" dismissible={false}>
          {errorMessage}
        </Alert>
      </div>
    )}

    {validPasswordResetToken ? (
      <form
        method="POST"
        class="bg-white shadow rounded-lg p-8 space-y-6 border border-slate-200"
      >
        <input type="hidden" name="_csrf" value={csrfTokenForForm} />
        <input type="hidden" name="token" value={tokenParam} />

        <div>
          <label
            for="password-reset"
            class="block text-sm font-medium mb-1"
          >
            New Password <span class="text-red-500">*</span>
          </label>
          <input
            id="password-reset"
            name="password"
            type="password"
            required
            minlength="8"
            autocomplete="new-password"
            placeholder="At least 8 characters"
            class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          />
        </div>

        <div>
          <label
            for="confirm-password-reset"
            class="block text-sm font-medium mb-1"
          >
            Confirm New Password <span class="text-red-500">*</span>
          </label>
          <input
            id="confirm-password-reset"
            name="confirm_password"
            type="password"
            required
            minlength="8"
            autocomplete="new-password"
            placeholder="Re-enter your new password"
            class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          />
        </div>

        <div>
          <Button type="submit" variant="primary" size="lg" fullWidth>
            Reset Password
          </Button>
        </div>
      </form>
    ) : (
      <div class="bg-white shadow rounded-lg p-8 text-center border border-slate-200">
        <p class="mb-4">
          Unable to load password reset form. Your link may be invalid or expired.
        </p>
        <a href="/auth/forgot-password">
          <Button variant="secondary" size="md" fullWidth>
            Request New Reset Link
          </Button>
        </a>
      </div>
    )}

    <p class="mt-8 text-center text-sm text-gray-600">
      Back to&nbsp;
      <a
        href="/auth/signin"
        class="font-medium text-primary-600 hover:underline"
      >
        Sign In
      </a>
    </p>
  </div>
</AuthLayout>
