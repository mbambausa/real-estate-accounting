---
// src/pages/auth/forgot-password.astro
import AuthLayout from "@layouts/AuthLayout.astro";
import Button from "@components/ui/Button.astro";
import Alert from "@components/ui/Alert.astro";
import type { RuntimeEnv } from "../../env.d";

// Type assertion for locals if not globally typed
const locals = Astro.locals as App.Locals;

let errorMessage: string | null = null;
let successMessage: string | null = null;

// Process form submission
if (Astro.request.method === "POST") {
  const env = locals.runtime?.env as RuntimeEnv | undefined;

  if (!env?.DB) {
    errorMessage = "Service Unavailable: Database configuration error. Please try again later.";
    console.error("Reset Password POST: DB binding not found in runtime.env");
    Astro.response.status = 503; // Service Unavailable
  } else {
    const db = env.DB;
    try {
      const formData = await Astro.request.formData();
      const email = formData.get("email")?.toString().trim().toLowerCase() ?? "";
      
      // Basic validation
      if (!email) {
        errorMessage = "Please enter your email address.";
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        errorMessage = "Please enter a valid email address.";
      } else {
        // Check if user exists
        const existingUser = await db
          .prepare("SELECT id FROM users WHERE email = ? LIMIT 1")
          .bind(email)
          .first();
        
        // Always show success message even if user doesn't exist (security best practice)
        // This prevents user enumeration
        successMessage = "If an account exists with this email, you will receive password reset instructions shortly.";
        
        if (existingUser) {
          // In a real implementation, you would:
          // 1. Generate a secure token
          // 2. Store the token in the database with an expiration
          // 3. Send an email with a reset link
          
          // For this demo, we'll just log that a user was found
          console.log(`Password reset requested for existing user: ${email}`);
          
          // Example token generation (would normally be stored in DB)
          const resetToken = crypto.randomUUID();
          const expires = Math.floor(Date.now() / 1000) + 3600; // 1 hour from now
          
          // In production, store this token in the database
          // await db.prepare("INSERT INTO reset_tokens (token, user_id, expires) VALUES (?, ?, ?)")
          //   .bind(resetToken, existingUser.id, expires)
          //   .run();
          
          // Then send an email with a link like: /auth/reset-password?token=${resetToken}
        } else {
          // Log for auditing purposes, but don't expose this to the user
          console.log(`Password reset requested for non-existent user: ${email}`);
        }
      }
    } catch (e: unknown) {
      const error = e instanceof Error ? e : new Error(String(e));
      console.error("Reset Password Error:", error.message, error.stack);
      
      // Don't expose the actual error to the user
      errorMessage = "An unexpected error occurred. Please try again.";
      Astro.response.status = 500;
    }
  }
}
---

<AuthLayout title="Reset Password">
  <div class="w-full max-w-sm mx-auto">
    <div class="text-center mb-8">
      <a href="/" class="inline-block mb-4">
        <svg class="w-16 h-16 text-primary-600 mx-auto" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M3.75 3A.75.75 0 003 3.75v16.5c0 .414.336.75.75.75h16.5A.75.75 0 0021 20.25V3.75A.75.75 0 0020.25 3H3.75zM6.5 6.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75h6.5a.75.75 0 010 1.5h-6.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75H17a.75.75 0 010 1.5H7.25a.75.75 0 01-.75-.75zm.75 2.75a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5z" clip-rule="evenodd" />
        </svg>
      </a>
      <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">Reset Password</h1>
      <p class="text-sm text-gray-600 mt-2">Enter your email to receive a password reset link.</p>
    </div>
  
    {successMessage && (
      <Alert type="success" dismissible={false}>
        {successMessage}
      </Alert>
    )}
  
    {errorMessage && (
      <Alert type="error" dismissible={false}>
        {errorMessage}
      </Alert>
    )}
  
    {!successMessage && (
      <form method="POST" class="bg-white shadow-xl rounded-lg px-6 py-8 sm:px-8 sm:py-10 space-y-6 border border-gray-200">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1.5">
            Email Address <span class="text-red-500">*</span>
          </label>
          <input 
            id="email"
            name="email" 
            type="email" 
            required 
            autocomplete="email"
            placeholder="you@example.com"
            class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
          />
        </div>
      
        <div class="pt-2">
          <Button 
            type="submit" 
            variant="primary" 
            size="lg"
            fullWidth={true}
          >
            Send Reset Link
          </Button>
        </div>
      </form>
    )}
  
    <p class="mt-8 text-center text-sm text-gray-600">
      Remember your password? 
      <a href="/auth/signin" class="font-medium text-primary-600 hover:text-primary-500 hover:underline">
        Sign In
      </a>
    </p>
  </div>
</AuthLayout>