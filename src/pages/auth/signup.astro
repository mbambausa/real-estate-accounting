---
// src/pages/auth/signup.astro
import AuthLayout from "@layouts/AuthLayout.astro";
import Alert from "@components/ui/Alert.astro";
import Button from "@components/ui/Button.astro";
import { hashPassword } from "../../lib/passwordUtils";
import type { RuntimeEnv } from "../../env.d";
import { validateRequestCsrf } from "../../utils/csrf";

const locals = Astro.locals as App.Locals;
const runtimeEnv = locals.runtime?.env as RuntimeEnv | undefined;

// Pull the CSRF token issued by our middleware
const csrfTokenForForm = locals.csrfToken || "";

// Error state and a single object to hold all form values
let errorMessage: string | null = null;
let formInputValues: {
  name?: string;
  email?: string;
  password?: string;
  confirmPassword?: string;
  termsAgreed?: boolean;
} = {};

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const name = formData.get("name")?.toString().trim() || "";
  const email = formData.get("email")?.toString().trim().toLowerCase() || "";
  const password = formData.get("password")?.toString() || "";
  const confirmPassword = formData.get("confirm_password")?.toString() || "";
  const termsAgreed = formData.get("terms") === "on";
  formInputValues = { name, email, password, confirmPassword, termsAgreed };

  // 1) CSRF re-validation
  const csrfValid = await validateRequestCsrf(Astro);
  if (!csrfValid) {
    errorMessage = "Invalid security token. Please try submitting the form again.";
    Astro.response.status = 403;
  }
  // 2) Server-config sanity check
  else if (!runtimeEnv?.DB) {
    errorMessage =
      "Service Unavailable: Server configuration error. Please try again later.";
    Astro.response.status = 503;
  }
  // 3) Field-level validations
  else if (!email || !password || !confirmPassword) {
    errorMessage = "Please fill in all required fields: Email, Password, Confirm Password.";
  } else if (name.length > 100) {
    errorMessage = "Name cannot exceed 100 characters.";
  } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    errorMessage = "Please enter a valid email address.";
  } else if (password.length < 8) {
    errorMessage = "Password must be at least 8 characters long.";
  } else if (!/[A-Z]/.test(password)) {
    errorMessage = "Password must include at least one uppercase letter.";
  } else if (!/[0-9]/.test(password)) {
    errorMessage = "Password must include at least one number.";
  } else if (!/[^A-Za-z0-9]/.test(password)) {
    errorMessage = "Password must include at least one special character.";
  } else if (password !== confirmPassword) {
    errorMessage = "Passwords do not match. Please re-enter.";
  } else if (!termsAgreed) {
    errorMessage = "You must agree to the Terms of Service and Privacy Policy.";
  }
  // 4) Database‐level check & insertion
  else {
    const db = runtimeEnv.DB;
    const existing: { id: string } | null = await db
      .prepare("SELECT id FROM users WHERE email = ?1 LIMIT 1")
      .bind(email)
      .first();

    if (existing) {
      errorMessage =
        "An account with this email already exists. Please log in or use another email.";
    } else {
      const passwordHash = await hashPassword(password);
      const newUserId = crypto.randomUUID();
      const now = Math.floor(Date.now() / 1000);

      const result = await db
        .prepare(
          `INSERT INTO users
            (id, email, name, password_hash, email_verified, created_at, updated_at)
           VALUES
            (?1, ?2, ?3, ?4, 0, ?5, ?5)`
        )
        .bind(newUserId, email, name || null, passwordHash, now)
        .run();

      if (result.success) {
        // On success, redirect immediately with a query flag
        return Astro.redirect("/auth/signin?registered=true");
      } else {
        console.error("Signup DB Insert Error:", result.error, result.meta);
        errorMessage =
          "Registration failed due to a database error. Please try again.";
      }
    }
  }
}
---

<AuthLayout title="Create Your Account">
  <div class="w-full max-w-md mx-auto">
    <div class="text-center mb-6">
      <a href="/" aria-label="Home">{/* logo SVG here */}</a>
      <h1 class="text-2xl font-bold">Register</h1>
      <p class="text-sm text-gray-600 mt-1">
        Join our community by creating a new account.
      </p>
    </div>

    {errorMessage && (
      <div class="mb-4">
        <Alert type="error" dismissible={false}>{errorMessage}</Alert>
      </div>
    )}

    <form
      method="POST"
      class="bg-white shadow rounded-lg p-8 space-y-6 border border-slate-200"
    >
      <input type="hidden" name="_csrf" value={csrfTokenForForm} />

      <div>
        <label for="name-signup" class="block text-sm font-medium mb-1">
          Full Name (Optional)
        </label>
        <input
          id="name-signup"
          name="name"
          type="text"
          placeholder="John Doe"
          autocomplete="name"
          class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          value={formInputValues.name || ""}
        />
      </div>

      <div>
        <label for="email-signup" class="block text-sm font-medium mb-1">
          Email Address <span class="text-red-500">*</span>
        </label>
        <input
          id="email-signup"
          name="email"
          type="email"
          required
          autocomplete="email"
          placeholder="you@example.com"
          class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          value={formInputValues.email || ""}
        />
      </div>

      <div x-data="{ password: '', strength: 0, show: false }">
        <label for="password-signup" class="block text-sm font-medium mb-1">
          Password <span class="text-red-500">*</span>
        </label>
        <div class="relative">
          <input
            id="password-signup"
            name="password"
            x-bind:type="show ? 'text' : 'password'"
            required
            minlength="8"
            autocomplete="new-password"
            placeholder="Minimum 8 characters"
            x-model="password"
            x-on:input="strength = window.calculatePasswordStrength(password)"
            class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          />
          <button
            type="button"
            class="absolute inset-y-0 right-0 pr-3 flex items-center"
            x-on:click="show = !show"
            aria-label="Toggle password visibility"
            tabindex="-1"
          >
            <!-- small eye icons here -->
          </button>
        </div>
        <!-- strength bar and text, same as your setup -->
      </div>

      <div>
        <label for="confirm-password-signup" class="block text-sm font-medium mb-1">
          Confirm Password <span class="text-red-500">*</span>
        </label>
        <input
          id="confirm-password-signup"
          name="confirm_password"
          type="password"
          required
          minlength="8"
          autocomplete="new-password"
          placeholder="Re-enter your password"
          class="mt-1 block w-full px-4 py-2.5 border rounded-lg"
          value={formInputValues.confirmPassword || ""}
        />
      </div>

      <div class="flex items-start">
        <input
          id="terms"
          name="terms"
          type="checkbox"
          required
          class="h-4 w-4 rounded border-gray-300"
          checked={formInputValues.termsAgreed || false}
        />
        <label for="terms" class="ml-3 text-sm">
          I agree to the
          <a href="/terms" class="underline">Terms of Service</a> and
          <a href="/privacy" class="underline">Privacy Policy</a>.
        </label>
      </div>

      <div>
        <Button type="submit" variant="primary" size="lg" fullWidth>
          Create Account
        </Button>
      </div>
    </form>

    <p class="mt-8 text-center text-sm text-gray-600">
      Already have an account?&nbsp;
      <a href="/auth/signin" class="font-medium text-primary-600 hover:underline">
        Sign In
      </a>
    </p>
  </div>
</AuthLayout>

<script is:inline>
  // Alpine helpers (same as your signup page before)
  function calculatePasswordStrength(password) {
    if (!password) return 0;
    let score = 0;
    if (password.length >= 8) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/[0-9]/.test(password)) score++;
    if (/[^A-Za-z0-9]/.test(password)) score++;
    return Math.min(score, 4);
  }
  function getStrengthText(level) {
    return ["Too weak","Weak","Fair","Good","Strong"][level] || "Too weak";
  }
  if (typeof window !== "undefined") {
    window.calculatePasswordStrength = calculatePasswordStrength;
    window.getStrengthText = getStrengthText;
  }
</script>
