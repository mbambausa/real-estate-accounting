---
// src/pages/auth/signup.astro
import AuthLayout from "@layouts/AuthLayout.astro";
import { hashPassword } from '../../lib/passwordUtils';
import type { RuntimeEnv } from "../../env.d";
import Alert from "@components/ui/Alert.astro";
import Button from "@components/ui/Button.astro";

// Type assertion for locals if not globally typed
const locals = Astro.locals as App.Locals;

let errorMessage: string | null = null;
let successMessage: string | null = null;

if (Astro.request.method === "POST") {
  const env = locals.runtime?.env as RuntimeEnv | undefined;

  if (!env?.DB) {
    errorMessage = "Service Unavailable: Database configuration error. Please try again later.";
    console.error("Signup POST: DB binding not found in Astro.locals.runtime.env");
    Astro.response.status = 503; // Service Unavailable
  } else {
    const db = env.DB;
    try {
      const formData = await Astro.request.formData();
      const name = formData.get("name")?.toString().trim() ?? "";
      const email = formData.get("email")?.toString().trim().toLowerCase() ?? "";
      const password = formData.get("password")?.toString() ?? "";
      const confirmPassword = formData.get("confirm_password")?.toString() ?? "";
      const terms = formData.get("terms")?.toString() ?? "";

      // Enhanced Validations
      if (!email || !password || !confirmPassword) {
        errorMessage = "Please fill in all required fields: Email, Password, and Confirm Password.";
      } else if (name.length > 100) {
        errorMessage = "Name cannot exceed 100 characters.";
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        errorMessage = "Please enter a valid email address.";
      } else if (password.length < 8) {
        errorMessage = "Password must be at least 8 characters long.";
      } else if (!/[A-Z]/.test(password)) {
        errorMessage = "Password must include at least one uppercase letter.";
      } else if (!/[0-9]/.test(password)) {
        errorMessage = "Password must include at least one number.";
      } else if (!/[^A-Za-z0-9]/.test(password)) {
        errorMessage = "Password must include at least one special character.";
      } else if (password !== confirmPassword) {
        errorMessage = "Passwords do not match. Please re-enter.";
      } else if (!terms) {
        errorMessage = "You must agree to the Terms of Service and Privacy Policy.";
      } else {
        // Check if user already exists
        const existingUser: { id: string } | null = await db
          .prepare("SELECT id FROM users WHERE email = ?1 LIMIT 1")
          .bind(email)
          .first();
        
        if (existingUser) {
          errorMessage = "An account with this email already exists. Please try logging in or use a different email.";
        } else {
          // Hash the password
          const passwordHash = await hashPassword(password);
          
          const newUserId = crypto.randomUUID();
          const now = Math.floor(Date.now() / 1000);

          // Insert new user
          const insertResult = await db
            .prepare("INSERT INTO users (id, email, name, password_hash, created_at, updated_at) VALUES (?1, ?2, ?3, ?4, ?5, ?6)")
            .bind(newUserId, email, name || null, passwordHash, now, now)
            .run();

          if (insertResult.success) {
            // Redirect to sign-in page with a success message
            return Astro.redirect("/auth/signin?registered=true");
          } else {
            console.error("Signup DB Insert Error:", insertResult.error);
            errorMessage = "Registration failed due to a database error. Please try again.";
          }
        }
      }
    } catch (e: unknown) {
      const error = e instanceof Error ? e : new Error(String(e));
      console.error("Signup General Error:", error.message, error.stack);
      errorMessage = "An unexpected error occurred during registration. Please try again.";
      Astro.response.status = 500;
    }
  }
}
---

<AuthLayout title="Create Your Account">
  <div class="w-full max-w-md mx-auto">
    <div class="text-center mb-8">
      <a href="/" class="inline-block mb-4">
        <svg class="w-16 h-16 text-primary-600 mx-auto" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M3.75 3A.75.75 0 003 3.75v16.5c0 .414.336.75.75.75h16.5A.75.75 0 0021 20.25V3.75A.75.75 0 0020.25 3H3.75zM6.5 6.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75h6.5a.75.75 0 010 1.5h-6.5a.75.75 0 01-.75-.75zm0 3.5a.75.75 0 01.75-.75H17a.75.75 0 010 1.5H7.25a.75.75 0 01-.75-.75zm.75 2.75a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5z" clip-rule="evenodd" />
        </svg>
      </a>
      <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">Register</h1>
      <p class="text-sm text-gray-600 mt-2">Join Real Estate Accounting today.</p>
    </div>

    {errorMessage && (
      <Alert type="error" dismissible={false}>
        {errorMessage}
      </Alert>
    )}

    <form method="POST" class="bg-white shadow-xl rounded-lg px-6 py-8 sm:px-8 sm:py-10 space-y-6 border border-gray-200">
      <div>
        <label for="name-signup" class="block text-sm font-medium text-gray-700 mb-1.5">Full Name (Optional)</label>
        <input 
          id="name-signup"
          name="name" 
          type="text" 
          placeholder="John Doe"
          autocomplete="name"
          class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
        />
      </div>
      
      <div>
        <label for="email-signup" class="block text-sm font-medium text-gray-700 mb-1.5">Email Address <span class="text-red-500">*</span></label>
        <input 
          id="email-signup"
          name="email" 
          type="email" 
          required 
          autocomplete="email"
          placeholder="you@example.com"
          class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
        />
      </div>
      
      <div x-data="{ password: '', strength: 0 }">
        <label for="password-signup" class="block text-sm font-medium text-gray-700 mb-1.5">
          Password <span class="text-red-500">*</span>
        </label>
        <div class="relative">
          <input 
            id="password-signup"
            name="password" 
            type="password" 
            required 
            minlength="8" 
            autocomplete="new-password"
            placeholder="Minimum 8 characters"
            x-model="password"
            x-on:input="strength = calculatePasswordStrength(password)"
            class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
          />
          <button 
            type="button"
            class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
            x-data="{ show: false }"
            x-on:click="show = !show; $refs.pwd.type = show ? 'text' : 'password'"
            tabindex="-1"
          >
            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" x-show="!show">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" x-show="show" style="display: none;">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
            </svg>
          </button>
        </div>
        <!-- Password strength indicator -->
        <div class="mt-1.5 h-1 w-full bg-gray-200 rounded">
          <div 
            class="h-1 rounded transition-all"
            x-bind:class="{
              'w-1/4 bg-red-500': strength === 1,
              'w-2/4 bg-yellow-500': strength === 2,
              'w-3/4 bg-blue-500': strength === 3,
              'w-full bg-green-500': strength === 4
            }"
          ></div>
        </div>
        <p class="mt-1 text-xs text-gray-500" x-text="getStrengthText(strength)"></p>
        
        <!-- Password requirements -->
        <div class="text-xs text-gray-500 mt-2 space-y-1">
          <p>Password must include:</p>
          <ul class="list-disc pl-5 space-y-0.5">
            <li x-bind:class="{ 'text-green-500': password.length >= 8 }">At least 8 characters</li>
            <li x-bind:class="{ 'text-green-500': /[A-Z]/.test(password) }">At least one uppercase letter</li>
            <li x-bind:class="{ 'text-green-500': /[0-9]/.test(password) }">At least one number</li>
            <li x-bind:class="{ 'text-green-500': /[^A-Za-z0-9]/.test(password) }">At least one special character</li>
          </ul>
        </div>
      </div>
      
      <div>
        <label for="confirm_password-signup" class="block text-sm font-medium text-gray-700 mb-1.5">Confirm Password <span class="text-red-500">*</span></label>
        <input 
          id="confirm_password-signup"
          name="confirm_password" 
          type="password" 
          required 
          minlength="8"
          autocomplete="new-password"
          placeholder="Re-enter your password"
          class="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors" 
        />
      </div>
      
      <!-- Terms and conditions consent -->
      <div class="flex items-start">
        <div class="flex items-center h-5">
          <input 
            id="terms" 
            name="terms" 
            type="checkbox" 
            required
            class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" 
          />
        </div>
        <div class="ml-3 text-sm">
          <label for="terms" class="font-medium text-gray-700">
            I agree to the 
            <a href="/terms" class="text-primary-600 hover:text-primary-500 hover:underline">Terms of Service</a> 
            and 
            <a href="/privacy" class="text-primary-600 hover:text-primary-500 hover:underline">Privacy Policy</a>
          </label>
        </div>
      </div>
      
      <div class="pt-2">
        <Button 
          type="submit" 
          variant="primary" 
          size="lg"
          fullWidth={true}
        >
          Create Account
        </Button>
      </div>
    </form>
    <p class="mt-8 text-center text-sm text-gray-600">
      Already have an account? 
      <a href="/auth/signin" class="font-medium text-primary-600 hover:text-primary-500 hover:underline">
        Sign In
      </a>
    </p>
  </div>
</AuthLayout>

<script>
// TypeScript-compatible functions for password strength
interface Window {
  calculatePasswordStrength: (password: string) => number;
  getStrengthText: (strength: number) => string;
}

// JavaScript for password strength calculation
function calculatePasswordStrength(password: string): number {
  if (!password) return 0;
  
  let strength = 0;
  
  // Length check
  if (password.length >= 8) strength += 1;
  if (password.length >= 12) strength += 1;
  
  // Character variety checks
  if (/[A-Z]/.test(password)) strength += 1;
  if (/[0-9]/.test(password)) strength += 1;
  if (/[^A-Za-z0-9]/.test(password)) strength += 1;
  
  // Scale from 0-5 to 0-4
  return Math.min(4, Math.floor(strength * 0.8));
}

function getStrengthText(strength: number): string {
  switch (strength) {
    case 0: return "Password strength: Too weak";
    case 1: return "Password strength: Weak";
    case 2: return "Password strength: Fair";
    case 3: return "Password strength: Good";
    case 4: return "Password strength: Strong";
    default: return "";
  }
}

// Make functions available to Alpine
(window as any).calculatePasswordStrength = calculatePasswordStrength;
(window as any).getStrengthText = getStrengthText;
</script>