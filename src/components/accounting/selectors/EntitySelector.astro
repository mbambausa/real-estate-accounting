---
// src/components/accounting/selectors/EntitySelector.astro
import type { DbEntity } from "@db/schema";

interface Props {
  entities: DbEntity[]; // All available entities to choose from
  selectedEntityId?: string | null;
  name?: string; // HTML name attribute for the select input
  id?: string;
  required?: boolean;
  label?: string;
  placeholder?: string;
  disabled?: boolean;
  class?: string; // Additional classes for the select element
  onCha?: string; // Alpine.js x-on:change handler string
}

const {
  entities = [],
  selectedEntityId = null,
  name = "entity_id",
  id = "entity-selector",
  required = false,
  label = "Entity",
  placeholder = "Select an entity...",
  disabled = false,
  class: customClass,
  onCha, // Renamed to avoid conflict
} = Astro.props;

// Assuming entities passed are already filtered for active status if needed by the parent
const baseClasses = "w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors bg-white disabled:bg-gray-100 disabled:cursor-not-allowed";
const finalClasses = `${baseClasses} ${customClass || ''}`;
---
{label && <label for={id} class="block text-sm font-medium text-gray-700 mb-1.5">{label}{required && <span class="text-red-500">*</span>}</label>}
<select
  name={name}
  id={id}
  required={required}
  disabled={disabled}
  class={finalClasses}
  x-on:change={onCha}
>
  {placeholder && <option value="" disabled={required} selected={!selectedEntityId}>{placeholder}</option>}
  {entities.map(entity => (
    <option value={entity.id} selected={selectedEntityId === entity.id}>
      {entity.name} {entity.legal_name && entity.legal_name !== entity.name ? `(${entity.legal_name})` : ''}
    </option>
  ))}
  {entities.length === 0 && !placeholder && <option value="" disabled>No entities available</option>}
</select>