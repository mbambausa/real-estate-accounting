---
// src/components/entities/EntityList.astro
import type { DbEntity as Entity } from "../../db/schema"; 

interface Props {
  entities: Entity[];
  showControls?: boolean;
  showHierarchyInitial?: boolean;
}

const {
  entities = [],
  showControls = true,
  showHierarchyInitial = false,
} = Astro.props;

interface HierarchicalEntity extends Entity {
  children: HierarchicalEntity[];
  depth: number;
}

function buildEntityHierarchy(
  allEntities: Entity[],
  parentId: string | null = null,
  currentDepth: number = 0
): HierarchicalEntity[] {
  const children: HierarchicalEntity[] = [];
  for (const entity of allEntities) {
    if (entity.parent_id === parentId) {
      const hierarchicalEntity: HierarchicalEntity = {
        ...entity,
        depth: currentDepth,
        children: buildEntityHierarchy(allEntities, entity.id, currentDepth + 1),
      };
      children.push(hierarchicalEntity);
    }
  }
  return children.sort((a, b) => a.name.localeCompare(b.name));
}

const hierarchicalEntitiesToDisplay = buildEntityHierarchy(entities);

const formatBusinessTypeDisplay = (type?: string | null) => {
  if (!type) return '—';
  return type
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Flatten the hierarchical structure for display
function flattenHierarchy(entities: HierarchicalEntity[]): HierarchicalEntity[] {
  let result: HierarchicalEntity[] = [];
  
  for (const entity of entities) {
    result.push(entity);
    if (entity.children && entity.children.length > 0) {
      result = result.concat(flattenHierarchy(entity.children));
    }
  }
  
  return result;
}

const flatEntities = flattenHierarchy(hierarchicalEntitiesToDisplay);
const containerClasses = `entity-list-container ${showHierarchyInitial ? 'show-hierarchy-active' : ''}`;
---

<div class={containerClasses}>
  {entities.length === 0 ? (
    <div class="p-6 text-center text-gray-500 border-t border-gray-200">
      <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">No entities found</h3>
      <p class="mt-1 text-sm text-gray-500">
        {showControls ? "Get started by creating a new entity." : "There are no entities to display."}
      </p>
      {showControls && (
        <div class="mt-6">
          <a href="/app/entities/new" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
            Create Entity
          </a>
        </div>
      )}
    </div>
  ) : (
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-100">
          <tr>
            <th scope="col" class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Name
            </th>
            <th scope="col" class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Legal Name
            </th>
            <th scope="col" class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Business Type
            </th>
            <th scope="col" class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              EIN
            </th>
            {showControls && (
              <th scope="col" class="px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">
                Actions
              </th>
            )}
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="entity-table-body">
          {flatEntities.map(entity => (
            <tr 
              class="hover:bg-gray-50 transition-colors duration-150 ease-in-out"
              data-entity-row
              data-entity-id={entity.id}
              data-entity-name={(entity.name || '').toLowerCase()}
              data-entity-legal-name={(entity.legal_name || '').toLowerCase()}
              data-entity-business-type={entity.business_type || ''}
              data-entity-parent-id={entity.parent_id || ''}
              data-depth={entity.depth}
            >
              <td class="px-4 py-3 whitespace-nowrap text-sm">
                <div class="flex items-center" style={showHierarchyInitial && entity.depth > 0 ? `padding-left: ${entity.depth * 1.5}rem;` : ''}>
                  {showHierarchyInitial && entity.depth > 0 && (
                    <>
                      <span class="hierarchy-indicator mr-1 text-gray-400 inline-block" style={`width: ${entity.depth * 0.75}rem;`}></span>
                      <span class="hierarchy-branch text-gray-400 mr-1">└─</span>
                    </>
                  )}
                  <a href={`/app/entities/${entity.id}`} class="font-medium text-primary-600 hover:text-primary-800 hover:underline truncate" title={entity.name}>
                    {entity.name}
                  </a>
                </div>
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600 truncate" title={entity.legal_name || ''}>
                {entity.legal_name || '—'}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">
                {entity.business_type ? (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {formatBusinessTypeDisplay(entity.business_type)}
                  </span>
                ) : '—'}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">
                {entity.ein || '—'}
              </td>
              {showControls && (
                <td class="px-4 py-3 whitespace-nowrap text-sm text-right space-x-2">
                  <a href={`/app/entities/${entity.id}/accounts`} class="text-green-600 hover:text-green-800 hover:underline" title="Manage Accounts">
                    Accounts
                  </a>
                  <a href={`/app/entities/${entity.id}?edit=true`} class="text-indigo-600 hover:text-indigo-800 hover:underline" title="Edit Entity">
                    Edit
                  </a>
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )}
</div>

<style>
  /* Hide hierarchy indicators by default */
  .entity-list-container:not(.show-hierarchy-active) .hierarchy-indicator,
  .entity-list-container:not(.show-hierarchy-active) .hierarchy-branch {
    display: none;
  }
  
  /* Style for hierarchy indicators when active */
  .entity-list-container.show-hierarchy-active [data-depth="0"] {
    font-weight: 500;
  }
</style>

<script>
  // Additional client-side enhancements could go here
  document.addEventListener('DOMContentLoaded', () => {
    // This would be a good place to add event listeners
    // for expanding/collapsing hierarchical entities if needed
  });
</script>