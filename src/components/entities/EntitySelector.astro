---
// src/components/entities/EntitySelector.astro
import type { Entity } from "../../types/entity";

interface Props {
  /** The list of entities to display as options. Should be pre-filtered by the calling page if necessary (e.g., to remove descendants of an entity being edited). */
  entities: Entity[];
  /** The ID of the currently selected entity, if any. */
  selectedId?: string | null; // Allow null for explicit no selection
  /** The 'name' attribute for the select element. */
  name?: string;
  /** The 'id' attribute for the select element. */
  id?: string;
  /** The label text to display above the select element. */
  label?: string;
  /** Whether the select element is required. */
  required?: boolean;
  /** The ID of an entity to exclude from the list (e.g., the entity currently being edited). */
  excludeId?: string | null;
  /** Placeholder text for the default/empty option. */
  placeholder?: string;
  /** Whether to show the legal name alongside the entity name. */
  showLegalName?: boolean;
  /** Additional CSS classes for the container div. */
  class?: string;
  /** Whether the select element should be disabled. */
  disabled?: boolean;
}

const {
  entities = [],
  selectedId = null, // Default to null for clearer intent
  name = "entity_id", // Default name attribute
  id = "entity_selector", // Default id attribute
  label,
  required = false,
  excludeId = null,
  placeholder = "Select an entity...",
  showLegalName = false,
  class: className, // Astro uses 'class:list' for dynamic classes, direct 'class' for static
  disabled = false,
} = Astro.props;

// Filter out the excluded entity if excludeId is provided
const entitiesToDisplay = excludeId
  ? entities.filter(entity => entity.id !== excludeId)
  : entities;

interface HierarchicalEntity extends Entity {
  children: HierarchicalEntity[];
  depth: number;
}

function buildEntityHierarchy(
  allEntities: Entity[],
  parentId: string | null = null,
  currentDepth: number = 0
): HierarchicalEntity[] {
  const children: HierarchicalEntity[] = [];
  for (const entity of allEntities) {
    // Ensure parent_id comparison handles null correctly
    if ((entity.parent_id === null && parentId === null) || entity.parent_id === parentId) {
      const hierarchicalEntity: HierarchicalEntity = {
        ...entity,
        depth: currentDepth,
        children: buildEntityHierarchy(allEntities, entity.id, currentDepth + 1),
      };
      children.push(hierarchicalEntity);
    }
  }
  return children.sort((a, b) => a.name.localeCompare(b.name));
}

const hierarchicalEntities = buildEntityHierarchy(entitiesToDisplay);

// Recursively build <option> tags for the select element
function getEntityOptionsHTML(entityList: HierarchicalEntity[]): string {
  let optionsHTML = "";
  for (const entity of entityList) {
    const indentChar = "â€”"; // Em dash for indentation
    const prefix = entity.depth > 0 ? `${indentChar.repeat(entity.depth)} ` : "";
    
    let displayName = entity.name;
    if (showLegalName && entity.legal_name && entity.legal_name !== entity.name) {
      displayName += ` (${entity.legal_name})`;
    }
    
    // The value of the option is the entity's UUID id
    optionsHTML += `<option value="${entity.id}" ${selectedId === entity.id ? 'selected' : ''}>${prefix}${displayName}</option>`;
    
    if (entity.children && entity.children.length > 0) {
      optionsHTML += getEntityOptionsHTML(entity.children);
    }
  }
  return optionsHTML;
}

const selectId = id || name || `entity-selector-${Math.random().toString(36).substring(7)}`;

---
<div class={className}>
  {label && (
    <label for={selectId} class="block text-sm font-medium text-gray-700 mb-1">
      {label}{required && <span class="text-red-500">*</span>}
    </label>
  )}
  
  <select
    id={selectId}
    name={name}
    class:list={[
      "w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors bg-white",
      { "bg-gray-100 cursor-not-allowed": disabled }
    ]}
    required={required}
    disabled={disabled}
  >
    <option value="">{placeholder}</option>
    <Fragment set:html={getEntityOptionsHTML(hierarchicalEntities)} />
  </select>
</div>
