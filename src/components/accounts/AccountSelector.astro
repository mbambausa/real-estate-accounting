---
// src/components/accounts/AccountSelector.astro
import type { DbChartOfAccount } from "@db/schema";
import type { AccountSystemType as AccountType } from "@db/schema";

interface Props {
  accounts: DbChartOfAccount[];
  selectedCode?: string;
  name?: string;
  id?: string;
  label?: string;
  required?: boolean;
  filterType?: AccountType;
  placeholder?: string;
  showCode?: boolean;
  onlyActive?: boolean;
  class?: string;
}

const {
  accounts = [],
  selectedCode = "",
  name = "account_code",
  id = "account_selector",
  label = "Account",
  required = false,
  filterType,
  placeholder = "Select an account...",
  showCode = true,
  onlyActive = true,
  class: className = ""
} = Astro.props;

// Filter accounts by type and active status
let filteredAccounts = accounts;

if (filterType) {
  filteredAccounts = filteredAccounts.filter(account => account.type === filterType);
}

if (onlyActive) {
  filteredAccounts = filteredAccounts.filter(account => account.is_active !== 0);
}

// Group by type for optgroup organization
const accountsByType = filteredAccounts.reduce((acc, account) => {
  const type = account.type;
  if (!acc[type]) {
    acc[type] = [];
  }
  acc[type].push(account);
  return acc;
}, {} as Record<string, DbChartOfAccount[]>);

// Sort account types in standard order
const orderedTypes: AccountType[] = ["asset", "liability", "equity", "income", "expense"];
---

<div class={className}>
  {label && (
    <label for={id} class="block text-sm font-medium text-gray-700 mb-1">
      {label}{required && <span class="text-red-600">*</span>}
    </label>
  )}
  
  <select
    id={id}
    name={name}
    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500"
    required={required}
  >
    <option value="">{placeholder}</option>
    
    {orderedTypes.map(type => {
      const typeAccounts = accountsByType[type] || [];
      if (typeAccounts.length === 0) return null;
      
      return (
        <optgroup label={type.charAt(0).toUpperCase() + type.slice(1)}>
          {typeAccounts.map(account => (
            <option 
              value={account.code} 
              selected={selectedCode === account.code}
            >
              {showCode ? `${account.code} - ${account.name}` : account.name}
            </option>
          ))}
        </optgroup>
      );
    })}
  </select>
</div>