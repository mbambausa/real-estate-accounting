---
import type { AccountSystemType as AccountType, DbChartOfAccount } from "@db/schema";
import Button from "@components/ui/Button.astro";

interface Props {
  accounts: DbChartOfAccount[];
  showInactive?: boolean;
}

const { accounts = [], showInactive = false } = Astro.props;

// Filter accounts
const accountsToDisplay = showInactive 
  ? accounts 
  : accounts.filter(account => account.is_active === 1);

interface HierarchicalAccount extends DbChartOfAccount {
  children: HierarchicalAccount[];
  depth: number;
}

function buildHierarchyForType(
  allAccountsOfType: DbChartOfAccount[],
  parentId: string | null = null,
  currentDepth: number = 0
): HierarchicalAccount[] {
  const children: HierarchicalAccount[] = [];
  for (const account of allAccountsOfType) {
    if (account.parent_id === parentId) {
      const hierarchicalAccount: HierarchicalAccount = {
        ...account,
        depth: currentDepth,
        children: buildHierarchyForType(allAccountsOfType, account.id, currentDepth + 1),
      };
      children.push(hierarchicalAccount);
    }
  }
  return children.sort((a, b) => a.code.localeCompare(b.code));
}

// Standard order of account types
const orderedAccountTypes: AccountType[] = ["asset", "liability", "equity", "income", "expense"];
const accountsByType: Record<AccountType, HierarchicalAccount[]> = {} as Record<AccountType, HierarchicalAccount[]>;

// Initialize empty arrays for each type
orderedAccountTypes.forEach(type => {
  accountsByType[type] = [];
});

// Group accounts by type first, then build hierarchy for each type
orderedAccountTypes.forEach(type => {
  const typeSpecificAccounts = accountsToDisplay.filter(account => account.type === type);
  accountsByType[type] = buildHierarchyForType(typeSpecificAccounts, null, 0);
});

// Function to get appropriate style class for account type header
const getTypeHeaderClass = (type: AccountType) => {
  const baseClasses = 'px-4 py-3 text-sm font-semibold';
  const typeClasses: Record<AccountType, string> = {
    asset: `${baseClasses} bg-blue-100 text-blue-800 border-b border-blue-200`,
    liability: `${baseClasses} bg-orange-100 text-orange-800 border-b border-orange-200`,
    equity: `${baseClasses} bg-purple-100 text-purple-800 border-b border-purple-200`,
    income: `${baseClasses} bg-green-100 text-green-800 border-b border-green-200`,
    expense: `${baseClasses} bg-red-100 text-red-800 border-b border-red-200`
  };
  return typeClasses[type] || `${baseClasses} bg-gray-100 text-gray-800 border-b border-gray-200`;
};
---

<div x-data="{
  expandedTypes: {
    asset: true,
    liability: true,
    equity: true,
    income: true,
    expense: true
  }
}">
  <div class="mb-6 flex flex-col sm:flex-row justify-between items-center gap-3">
    <h2 class="text-xl font-semibold text-gray-800">Accounts Hierarchy</h2>
    <div class="flex space-x-3">
      <Button
        type="button"
        variant="outline"
        size="sm"
        x-on:click="Object.keys(expandedTypes).forEach(key => expandedTypes[key] = true)"
      >
        Expand All Types
      </Button>
      <Button 
        type="button"
        variant="outline"
        size="sm"
        x-on:click="Object.keys(expandedTypes).forEach(key => expandedTypes[key] = false)"
      >
        Collapse All Types
      </Button>
    </div>
  </div>

  {accountsToDisplay.length === 0 ? (
    <div class="p-6 text-center text-gray-500 bg-white shadow-lg rounded-xl border border-gray-200">
      <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">No accounts to display.</h3>
      <p class="mt-1 text-sm text-gray-500">
        {showInactive ? "There are no accounts (active or inactive)." : "There are no active accounts. Try showing inactive accounts."}
      </p>
    </div>
  ) : (
    <div class="bg-white rounded-xl shadow-lg border border-gray-200 divide-y divide-gray-200">
      {orderedAccountTypes.map(typeKey => {
        const typeAccountsHierarchical = accountsByType[typeKey];
        if (!typeAccountsHierarchical || typeAccountsHierarchical.length === 0) return null;
        
        return (
          <div class="account-type-section">
            <button 
              type="button"
              class:list={[
                "w-full flex justify-between items-center cursor-pointer hover:opacity-90 transition-opacity",
                getTypeHeaderClass(typeKey)
              ]}
              x-on:click={`expandedTypes['${typeKey}'] = !expandedTypes['${typeKey}']`}
              aria-expanded="false"
              aria-controls={`accounts-panel-${typeKey}`}
            >
              <h3 class="font-semibold text-base">
                {typeKey.charAt(0).toUpperCase() + typeKey.slice(1)} Accounts
                <span class="ml-2 text-xs font-normal opacity-75">
                  ({typeAccountsHierarchical.reduce((count, acc) => count + 1 + acc.children.length, 0)} total)
                </span>
              </h3>
              <span class="transform transition-transform duration-200" x-bind:class="{ 'rotate-180': !expandedTypes['${typeKey}'] }">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </span>
            </button>
            
            <div 
              x-show={`expandedTypes['${typeKey}']`}
              x-transition:enter="transition ease-out duration-100"
              x-transition:enter-start="opacity-0 transform -translate-y-2"
              x-transition:enter-end="opacity-100 transform translate-y-0"
              x-transition:leave="transition ease-in duration-75"
              x-transition:leave-start="opacity-100 transform translate-y-0"
              x-transition:leave-end="opacity-0 transform -translate-y-2"
              class="accounts-panel border-t border-gray-200"
              id={`accounts-panel-${typeKey}`}
            >
              {typeAccountsHierarchical.length === 0 ? (
                <div class="p-4 text-sm text-gray-500 italic">
                  No {typeKey} accounts {showInactive ? '' : 'active '}to display.
                </div>
              ) : (
                <div class="p-4">
                  {typeAccountsHierarchical.map(account => (
                    <div class="account-item flex justify-between items-center py-2 border-b border-gray-100 hover:bg-gray-50 transition-colors text-sm" style={`padding-left: ${account.depth * 1.5 + 1}rem;`}>
                      <div class="flex-grow truncate">
                        <a href={`/app/accounts/${account.id}`} class="font-medium text-primary-600 hover:text-primary-800 hover:underline">
                          <span class="font-mono">{account.code}</span> - {account.name}
                        </a>
                        {account.description && (
                          <span class="text-xs text-gray-500 ml-2 italic hidden sm:inline">- {account.description}</span>
                        )}
                      </div>
                      <div class="flex-shrink-0 flex items-center space-x-3">
                        {account.is_active !== 1 ? (
                          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700">Inactive</span>
                        ) : (
                          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-700">Active</span>
                        )}
                        <a href={`/app/accounts/${account.id}?edit=true`} class="text-indigo-600 hover:text-indigo-800 text-xs hover:underline">Edit</a>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  )}
</div>